//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Settings/Controls/CarControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CarControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CarControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CarControls"",
    ""maps"": [
        {
            ""name"": ""Riding"",
            ""id"": ""b14bba94-2a02-44fc-a916-6204f3a954db"",
            ""actions"": [
                {
                    ""name"": "" Acceleration"",
                    ""type"": ""Button"",
                    ""id"": ""9208b09d-a8e6-4b8f-b40c-d635308f0cde"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Brake"",
                    ""type"": ""Button"",
                    ""id"": ""2e8e13cc-26bd-4118-b95e-af99e988be48"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Turning"",
                    ""type"": ""Button"",
                    ""id"": ""af79e8fa-bcec-4e38-8e11-7dd9edb571b5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""678e65f7-e5d7-4594-bd42-631c5a9fc805"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Left and Right"",
                    ""id"": ""09458c8f-29d5-4a40-8b20-a6684011c10e"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turning"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""cf504dc6-7ac9-4b70-bcdc-c0b39e45479f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turning"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""243f6f38-9638-4378-be5f-d5a42eab58c9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turning"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Front and Back"",
                    ""id"": ""3715b084-f591-4249-adaa-9c0a792db44d"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": "" Acceleration"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""cb2987b2-e71b-4ac0-9968-660096003ae9"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": "" Acceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""480ccb04-ce03-4410-a7ac-865d4db38825"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": "" Acceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Riding
        m_Riding = asset.FindActionMap("Riding", throwIfNotFound: true);
        m_Riding_Acceleration = m_Riding.FindAction(" Acceleration", throwIfNotFound: true);
        m_Riding_Brake = m_Riding.FindAction("Brake", throwIfNotFound: true);
        m_Riding_Turning = m_Riding.FindAction("Turning", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Riding
    private readonly InputActionMap m_Riding;
    private IRidingActions m_RidingActionsCallbackInterface;
    private readonly InputAction m_Riding_Acceleration;
    private readonly InputAction m_Riding_Brake;
    private readonly InputAction m_Riding_Turning;
    public struct RidingActions
    {
        private @CarControls m_Wrapper;
        public RidingActions(@CarControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Acceleration => m_Wrapper.m_Riding_Acceleration;
        public InputAction @Brake => m_Wrapper.m_Riding_Brake;
        public InputAction @Turning => m_Wrapper.m_Riding_Turning;
        public InputActionMap Get() { return m_Wrapper.m_Riding; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RidingActions set) { return set.Get(); }
        public void SetCallbacks(IRidingActions instance)
        {
            if (m_Wrapper.m_RidingActionsCallbackInterface != null)
            {
                @Acceleration.started -= m_Wrapper.m_RidingActionsCallbackInterface.OnAcceleration;
                @Acceleration.performed -= m_Wrapper.m_RidingActionsCallbackInterface.OnAcceleration;
                @Acceleration.canceled -= m_Wrapper.m_RidingActionsCallbackInterface.OnAcceleration;
                @Brake.started -= m_Wrapper.m_RidingActionsCallbackInterface.OnBrake;
                @Brake.performed -= m_Wrapper.m_RidingActionsCallbackInterface.OnBrake;
                @Brake.canceled -= m_Wrapper.m_RidingActionsCallbackInterface.OnBrake;
                @Turning.started -= m_Wrapper.m_RidingActionsCallbackInterface.OnTurning;
                @Turning.performed -= m_Wrapper.m_RidingActionsCallbackInterface.OnTurning;
                @Turning.canceled -= m_Wrapper.m_RidingActionsCallbackInterface.OnTurning;
            }
            m_Wrapper.m_RidingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Acceleration.started += instance.OnAcceleration;
                @Acceleration.performed += instance.OnAcceleration;
                @Acceleration.canceled += instance.OnAcceleration;
                @Brake.started += instance.OnBrake;
                @Brake.performed += instance.OnBrake;
                @Brake.canceled += instance.OnBrake;
                @Turning.started += instance.OnTurning;
                @Turning.performed += instance.OnTurning;
                @Turning.canceled += instance.OnTurning;
            }
        }
    }
    public RidingActions @Riding => new RidingActions(this);
    public interface IRidingActions
    {
        void OnAcceleration(InputAction.CallbackContext context);
        void OnBrake(InputAction.CallbackContext context);
        void OnTurning(InputAction.CallbackContext context);
    }
}
